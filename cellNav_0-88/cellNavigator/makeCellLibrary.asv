function  makeCellLibrary

global glob tis tisDat
tempFig = figure;
tempAx = gca(tempFig);

MPN = glob.NA.MPN;
WPN = glob.NA.WPN;

load([MPN 'obI.mat'])
load([MPN 'dsObj.mat'])

if exist([MPN 'shiftZ.mat']);
    load([MPN 'shiftZ.mat']);
    shouldShiftZ = 1;
else
    shouldShiftZ = 0;
end

%load([WPN 'tis.mat'])
tis = makeTis;


flipDim = [1 3 2 ];

downSamp = 1;
renderProps.smooth = 0;
renderProps.resize = 1;
renderProps.smoothPatch = 0;
renderProps.smoothSections = 0;


%% Pick cells

cellList = tis.cells.cids;

col = ones(length(cellList),3);
alph = ones(length(cellList),1);


%%
fvDir = [WPN 'fvLibrary\'];

try
    rmdir(fvDir,'s')
end
mkdir(fvDir)

save([fvDir 'obI.mat'],'obI');
save([fvDir 'tis.mat'],'tis');

%% Draw cells
trackCells = [];
cellsShown = {};
cellsNotShown = {};
for i = 1:length(cellList)
    subCell = names2Subs(obI,dsObj,cellList(i));
    sub = subCell{1};
    obName = cellList(i);
    fvFilename = sprintf('%s%d.mat',fvDir,obName);
    if 1%~exist(fvFilename,'file')
        if ~isempty(sub)
            if iscell(obName); obName = obName{1};end
            
            if shouldShiftZ %shift each plane
                if strcmp(shiftZ.type, 'translation')
                    shiftY = shiftZ.shifts(sub(:,3),1);
                    shiftX = shiftZ.shifts(sub(:,3),2);
                    sub(:,1) = sub(:,1) + shiftY;
                    sub(:,2) = sub(:,2) + shiftX;
                end
            end
            smallSub = shrinkSub(sub,downSamp);
            smallSub = smallSub(:,flipDim);
            
            
        else
            smallSub = [];
        end
        %trackCells = cat(1,trackCells,[obName size(sub,1)]);
        tic
        if isempty(smallSub)
            fv.vertices = [];
            fv.faces = [];
        else
            fv = subVolFV(smallSub,[],renderProps);
        end
        
        %% Scale
        fv.vertices = fv.vertices * obI.em.dsRes(1);
        
        fvFilename = sprintf('%s%d.mat',fvDir,obName);

        unsaved = 1;
        saveTries = 0;
        while unsaved
            saveTries = saveTries + 1;
            unsaved = 0;
            try
                save(fvFilename,'fv');
            catch err
                disp(sprintf('error saving %s',fvFilename))
                unsaved = 1;
            end
            if save
        end

        cla
        patch(tempAx,fv)
        pause(.01)
    end
    
end

%% Run SMs
if 0
    smDir = [WPN 'SMs\'];
    libDir = [WPN 'fvLibrary\'];
    dSMs = dir([smDir '*.mat']);
    nams = { dSMs.name};
    
    
    for i = 1:length(nams)
        clf
        if exist([smDir nams{i}],'file')
            load([smDir nams{i}])
            disp(sprintf('loading sm%s to get skeleton. %d of %d',nams{i},i,length(nams)))
            %showNepBones(sm.nep);
            %showRadSurf(sm.nep.pos,sm.nep.edges,sm.nep.nodeRad,[0 1 0],.4)
            if isfield(sm,'nep')
                if ~isempty(sm.nep)
                    fv = showRadSurf_cnv(sm.nep.pos,sm.nep.edges,sm.nep.nodeRad*0+.1,[1 1 1],1,tempFig);
                    pause(.01)
                    filename = sprintf('%sskelFV_%d.mat',libDir,sm.cid);
                    save(filename,'fv')
                    
                    filename = sprintf('%snep_%d.mat',libDir,sm.cid);
                    nep = sm.nep;
                    save(filename,'nep')
                end
            end
        end
    end
    close(tempFig)
end

renderRefs
makeTisDat



















